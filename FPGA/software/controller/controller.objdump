
controller.elf:     file format elf32-littlenios2
controller.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000814 memsz 0x00000814 flags r-x
    LOAD off    0x00001834 vaddr 0x00000834 paddr 0x00000850 align 2**12
         filesz 0x0000001c memsz 0x0000001c flags rw-
    LOAD off    0x0000186c vaddr 0x0000086c paddr 0x0000086c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000007ac  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  000007cc  000007cc  000017cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       0000001c  00000834  00000850  00001834  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  0000086c  0000086c  0000186c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  00001878  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001449  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000090d  00000000  00000000  00002e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009c0  00000000  00000000  00003756  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000380  00000000  00000000  00004118  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007c1  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000489  00000000  00000000  00004c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  000050e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  000050f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00006344  2**0
                  CONTENTS, READONLY
 16 .cpu          00000006  00000000  00000000  00006347  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000634d  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000634e  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0000634f  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  00006353  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  00006357  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0000635b  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00006366  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00006371  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0000637c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000016  00000000  00000000  00006386  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     001488ac  00000000  00000000  0000639c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
000007cc l    d  .rodata	00000000 .rodata
00000834 l    d  .rwdata	00000000 .rwdata
0000086c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../controller_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 controller.c
00000000 l    df *ABS*	00000000 controller_system.c
00000834 l     O .rwdata	00000008 LedsBrightnessMap
0000083c l     O .rwdata	00000008 LedsAddrMap
00000844 l     O .rwdata	00000008 LedsControlMap
000007e4 l     O .rodata	00000010 SsegBrightnessMap
000007f4 l     O .rodata	00000010 SsegWrMap
00000804 l     O .rodata	00000010 TcResetMap
00000814 l     O .rodata	00000010 TcMMap
00000824 l     O .rodata	00000010 TcStatusMap
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
000006d8 g     F .text	0000002c alt_main
00000850 g       *ABS*	00000000 __flash_rwdata_start
000003bc g     F .text	0000002c tc_get_ticks
00000280 g     F .text	00000014 sseg_shutdown
00000704 g     F .text	00000038 alt_putstr
00000368 g     F .text	00000010 status_led_en
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000870 g     O .bss	00000004 alt_argv
00008834 g       *ABS*	00000000 _gp
000005a4 g     F .text	0000001c warn_init
00000470 g     F .text	00000064 uart1_init
00000590 g     F .text	00000014 warn_set_en
000005c0 g     F .text	00000014 warn_shutdown
000000cc g     F .text	0000005c bcd_convert
0000057c g     F .text	00000014 warn_set_brightness
000004e8 g     F .text	00000040 uart1_rx
00000878 g       *ABS*	00000000 __bss_end
00000410 g     F .text	00000030 tc_reset
00000794 g     F .text	00000004 alt_dcache_flush_all
00000850 g       *ABS*	00000000 __ram_rwdata_end
00000834 g       *ABS*	00000000 __ram_rodata_end
0000084c g     O .rwdata	00000004 jtag_uart_0
00000878 g       *ABS*	00000000 end
0000c000 g       *ABS*	00000000 __alt_stack_pointer
00000760 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
00000378 g     F .text	00000044 tc_set_max
0000075c g     F .text	00000004 alt_sys_init
000004d4 g     F .text	00000014 uart1_shutdown
00000834 g       *ABS*	00000000 __ram_rwdata_start
000007cc g       *ABS*	00000000 __ram_rodata_start
00000878 g       *ABS*	00000000 __alt_stack_base
0000025c g     F .text	00000024 sseg_set_brightness
000003e8 g     F .text	00000028 tc_get_of
0000086c g       *ABS*	00000000 __bss_start
000001a0 g     F .text	0000003c leds_enable_led
0000005c g     F .text	00000044 main
0000086c g     O .bss	00000004 alt_envp
00000180 g     F .text	00000020 leds_set_brightness
0000056c g     F .text	00000010 uart1_read_status
00000294 g     F .text	00000048 sseg_set_bcd
000007cc g       *ABS*	00000000 __flash_rodata_start
000000a8 g     F .text	00000024 delay
0000073c g     F .text	00000020 alt_irq_init
00000874 g     O .bss	00000004 alt_argc
000002dc g     F .text	0000008c sseg_init
0000016c g     F .text	00000014 is_daylight
00000128 g     F .text	00000030 bcd_init
00000158 g     F .text	00000014 bcd_shutdown
0000045c g     F .text	00000014 tc_shutdown
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000850 g       *ABS*	00000000 _edata
00000878 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
0000079c g     F .text	00000008 altera_nios2_qsys_irq_init
0000c000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_ram
00000528 g     F .text	00000044 uart1_tx
0000000c g       .entry	00000000 _exit
000007a4 g     F .text	00000028 strlen
000000a0 g     F .text	00000008 nop
00000798 g     F .text	00000004 alt_icache_flush_all
000005d4 g     F .text	00000104 alt_load
00000248 g     F .text	00000014 leds_shutdown
00000440 g     F .text	0000001c tc_init
000001dc g     F .text	0000006c leds_init



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	def00014 	ori	sp,sp,49152
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a20d14 	ori	gp,gp,34868
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10821b14 	ori	r2,r2,2156

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c21e14 	ori	r3,r3,2168

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00005d40 	call	5d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00006d80 	call	6d8 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:

#include "sys/alt_stdio.h"
#include "controller_system.h"

int main()
{
  5c:	defffe04 	addi	sp,sp,-8
  60:	dfc00115 	stw	ra,4(sp)
	bcd_init();
  64:	00001280 	call	128 <bcd_init>
	sseg_init();
  68:	00002dc0 	call	2dc <sseg_init>
	tc_init();
  6c:	00004400 	call	440 <tc_init>
	uart1_init(8, 1, 8, 8, 651); // Should give us 9600 baud
  70:	01000204 	movi	r4,8
  74:	0080a2c4 	movi	r2,651
  78:	200d883a 	mov	r6,r4
  7c:	200f883a 	mov	r7,r4
  80:	d8800015 	stw	r2,0(sp)
  84:	01400044 	movi	r5,1
  88:	00004700 	call	470 <uart1_init>
	warn_init();
  8c:	00005a40 	call	5a4 <warn_init>

	alt_putstr("Entering event loop\n");
  90:	01000034 	movhi	r4,0
  94:	2101f304 	addi	r4,r4,1996
  98:	00007040 	call	704 <alt_putstr>
  9c:	003fff06 	br	9c <main+0x40>

000000a0 <nop>:
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
  a0:	0001883a 	nop
  a4:	f800283a 	ret

000000a8 <delay>:
}

void delay(dword_t n)
{
	dword_t i;
	for (i = 0; i < _min(1, n >> 1); ++i)
  a8:	2008d07a 	srli	r4,r4,1
  ac:	20000126 	beq	r4,zero,b4 <delay+0xc>
  b0:	01000044 	movi	r4,1
  b4:	0005883a 	mov	r2,zero
  b8:	00000206 	br	c4 <delay+0x1c>
	{
		__asm__ ("nop");
  bc:	0001883a 	nop
}

void delay(dword_t n)
{
	dword_t i;
	for (i = 0; i < _min(1, n >> 1); ++i)
  c0:	00800044 	movi	r2,1
  c4:	113ffd36 	bltu	r2,r4,bc <delay+0x14>
	{
		__asm__ ("nop");
	}
}
  c8:	f800283a 	ret

000000cc <bcd_convert>:

void bcd_convert(dword_t bin, byte_t bcd[BCD_MAX])
{
	REGW(BCD1_BIN_BASE, bin);
  cc:	00800074 	movhi	r2,1
  d0:	1084a404 	addi	r2,r2,4752
  d4:	11000035 	stwio	r4,0(r2)
	REGW(BCD1_CONTROL_BASE, BCD1_CONTROL_START);
  d8:	10bf8c04 	addi	r2,r2,-464
  dc:	00c00044 	movi	r3,1
  e0:	10c00035 	stwio	r3,0(r2)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
  e4:	0001883a 	nop
void bcd_convert(dword_t bin, byte_t bcd[BCD_MAX])
{
	REGW(BCD1_BIN_BASE, bin);
	REGW(BCD1_CONTROL_BASE, BCD1_CONTROL_START);
	nop();
	REGW(BCD1_CONTROL_BASE, 0x0);
  e8:	10000035 	stwio	zero,0(r2)
	while (!(REGR(BCD1_STATUS_BASE) & BCD1_STATUS_READY));
  ec:	00c00074 	movhi	r3,1
  f0:	18c49804 	addi	r3,r3,4704
  f4:	18800037 	ldwio	r2,0(r3)
  f8:	1080008c 	andi	r2,r2,2
  fc:	103ffd26 	beq	r2,zero,f4 <bcd_convert+0x28>
	dword_t t = REGR(BCD1_BCD_BASE);
 100:	00800074 	movhi	r2,1
 104:	1084a004 	addi	r2,r2,4736
 108:	10800037 	ldwio	r2,0(r2)
	bcd[0] = t & 0xf;
 10c:	10c003cc 	andi	r3,r2,15
	bcd[1] = t & 0xf0;
 110:	10803c0c 	andi	r2,r2,240
	REGW(BCD1_CONTROL_BASE, BCD1_CONTROL_START);
	nop();
	REGW(BCD1_CONTROL_BASE, 0x0);
	while (!(REGR(BCD1_STATUS_BASE) & BCD1_STATUS_READY));
	dword_t t = REGR(BCD1_BCD_BASE);
	bcd[0] = t & 0xf;
 114:	28c00005 	stb	r3,0(r5)
	bcd[1] = t & 0xf0;
 118:	28800045 	stb	r2,1(r5)
	bcd[2] = t & 0xf00;
 11c:	28000085 	stb	zero,2(r5)
	bcd[3] = t & 0xf000;
 120:	280000c5 	stb	zero,3(r5)
 124:	f800283a 	ret

00000128 <bcd_init>:
}

void bcd_init(void)
{
	// Reset BCD and TC and wait for ready to go high
	REGW(BCD1_CONTROL_BASE, BCD1_CONTROL_TC_RESET | BCD1_CONTROL_RESET);
 128:	00800074 	movhi	r2,1
 12c:	10843004 	addi	r2,r2,4288
 130:	00c00184 	movi	r3,6
 134:	10c00035 	stwio	r3,0(r2)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 138:	0001883a 	nop
void bcd_init(void)
{
	// Reset BCD and TC and wait for ready to go high
	REGW(BCD1_CONTROL_BASE, BCD1_CONTROL_TC_RESET | BCD1_CONTROL_RESET);
	nop();
	REGW(BCD1_CONTROL_BASE, 0x0);
 13c:	10000035 	stwio	zero,0(r2)
	while (!(REGR(BCD1_STATUS_BASE) & BCD1_STATUS_READY));
 140:	00c00074 	movhi	r3,1
 144:	18c49804 	addi	r3,r3,4704
 148:	18800037 	ldwio	r2,0(r3)
 14c:	1080008c 	andi	r2,r2,2
 150:	103ffd26 	beq	r2,zero,148 <bcd_init+0x20>
}
 154:	f800283a 	ret

00000158 <bcd_shutdown>:

void bcd_shutdown(void)
{
	REGW(BCD1_CONTROL_BASE, BCD1_CONTROL_TC_RESET | BCD1_CONTROL_RESET);
 158:	00800074 	movhi	r2,1
 15c:	10843004 	addi	r2,r2,4288
 160:	00c00184 	movi	r3,6
 164:	10c00035 	stwio	r3,0(r2)
 168:	f800283a 	ret

0000016c <is_daylight>:
}

bool is_daylight(void)
{
	return REGR(DAYLIGHT_BASE) > 0;
 16c:	00800074 	movhi	r2,1
 170:	1084e004 	addi	r2,r2,4992
 174:	10800037 	ldwio	r2,0(r2)
 178:	0084803a 	cmplt	r2,zero,r2
}
 17c:	f800283a 	ret

00000180 <leds_set_brightness>:

void leds_set_brightness(LedArray ledArray, byte_t brightness)
{
	REGW(LedsBrightnessMap[ledArray], brightness);
 180:	2109883a 	add	r4,r4,r4
 184:	d0a00004 	addi	r2,gp,-32768
 188:	2109883a 	add	r4,r4,r4
 18c:	1109883a 	add	r4,r2,r4
 190:	20800017 	ldw	r2,0(r4)
 194:	29403fcc 	andi	r5,r5,255
 198:	11400035 	stwio	r5,0(r2)
 19c:	f800283a 	ret

000001a0 <leds_enable_led>:
}

void leds_enable_led(LedArray ledArray, dword_t addr, bool en)
{
	REGW(LedsAddrMap[ledArray], addr);
 1a0:	2109883a 	add	r4,r4,r4
 1a4:	2109883a 	add	r4,r4,r4
 1a8:	d0a00204 	addi	r2,gp,-32760
 1ac:	1105883a 	add	r2,r2,r4
 1b0:	10800017 	ldw	r2,0(r2)
 1b4:	11400035 	stwio	r5,0(r2)
	REGW(LedsControlMap[ledArray], LEDS_CONTROL_SEL | (en ? LEDS_CONTROL_EN : 0));
 1b8:	d0a00404 	addi	r2,gp,-32752
 1bc:	1109883a 	add	r4,r2,r4
 1c0:	20800017 	ldw	r2,0(r4)
 1c4:	31803fcc 	andi	r6,r6,255
 1c8:	31800094 	ori	r6,r6,2
 1cc:	11800035 	stwio	r6,0(r2)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 1d0:	0001883a 	nop
void leds_enable_led(LedArray ledArray, dword_t addr, bool en)
{
	REGW(LedsAddrMap[ledArray], addr);
	REGW(LedsControlMap[ledArray], LEDS_CONTROL_SEL | (en ? LEDS_CONTROL_EN : 0));
	nop();
	REGW(LedsControlMap[ledArray], 0);
 1d4:	10000035 	stwio	zero,0(r2)
 1d8:	f800283a 	ret

000001dc <leds_init>:
}

void leds_init(void)
{
 1dc:	defffd04 	addi	sp,sp,-12
 1e0:	dfc00215 	stw	ra,8(sp)
 1e4:	dc400115 	stw	r17,4(sp)
 1e8:	dc000015 	stw	r16,0(sp)
	int i;
	REGW(LEDS_RESET_CONTROL_BASE, LEDS_RESET_CONTROL_AFR_COUNTER | LEDS_RESET_CONTROL_BOOST_COUNTER | LEDS_RESET_CONTROL_AFR | LEDS_RESET_CONTROL_BOOST);
 1ec:	00800074 	movhi	r2,1
 1f0:	10841004 	addi	r2,r2,4160
 1f4:	00c003c4 	movi	r3,15
 1f8:	10c00035 	stwio	r3,0(r2)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 1fc:	0001883a 	nop
void leds_init(void)
{
	int i;
	REGW(LEDS_RESET_CONTROL_BASE, LEDS_RESET_CONTROL_AFR_COUNTER | LEDS_RESET_CONTROL_BOOST_COUNTER | LEDS_RESET_CONTROL_AFR | LEDS_RESET_CONTROL_BOOST);
	nop();
	REGW(LEDS_RESET_CONTROL_BASE, 0);
 200:	10000035 	stwio	zero,0(r2)

	for (i = 0; i < LEDS_MAX; ++i)
 204:	0021883a 	mov	r16,zero
 208:	04400c84 	movi	r17,50
	{
		leds_enable_led(LedArrayAfr, i, false);
 20c:	800b883a 	mov	r5,r16
 210:	0009883a 	mov	r4,zero
 214:	000d883a 	mov	r6,zero
 218:	00001a00 	call	1a0 <leds_enable_led>
		leds_enable_led(LedArrayBoost, i, false);
 21c:	800b883a 	mov	r5,r16
 220:	01000044 	movi	r4,1
 224:	000d883a 	mov	r6,zero
	int i;
	REGW(LEDS_RESET_CONTROL_BASE, LEDS_RESET_CONTROL_AFR_COUNTER | LEDS_RESET_CONTROL_BOOST_COUNTER | LEDS_RESET_CONTROL_AFR | LEDS_RESET_CONTROL_BOOST);
	nop();
	REGW(LEDS_RESET_CONTROL_BASE, 0);

	for (i = 0; i < LEDS_MAX; ++i)
 228:	84000044 	addi	r16,r16,1
	{
		leds_enable_led(LedArrayAfr, i, false);
		leds_enable_led(LedArrayBoost, i, false);
 22c:	00001a00 	call	1a0 <leds_enable_led>
	int i;
	REGW(LEDS_RESET_CONTROL_BASE, LEDS_RESET_CONTROL_AFR_COUNTER | LEDS_RESET_CONTROL_BOOST_COUNTER | LEDS_RESET_CONTROL_AFR | LEDS_RESET_CONTROL_BOOST);
	nop();
	REGW(LEDS_RESET_CONTROL_BASE, 0);

	for (i = 0; i < LEDS_MAX; ++i)
 230:	847ff61e 	bne	r16,r17,20c <leds_init+0x30>
	{
		leds_enable_led(LedArrayAfr, i, false);
		leds_enable_led(LedArrayBoost, i, false);
	}
}
 234:	dfc00217 	ldw	ra,8(sp)
 238:	dc400117 	ldw	r17,4(sp)
 23c:	dc000017 	ldw	r16,0(sp)
 240:	dec00304 	addi	sp,sp,12
 244:	f800283a 	ret

00000248 <leds_shutdown>:

void leds_shutdown(void)
{
	REGW(LEDS_RESET_CONTROL_BASE, LEDS_RESET_CONTROL_AFR_COUNTER | LEDS_RESET_CONTROL_BOOST_COUNTER | LEDS_RESET_CONTROL_AFR | LEDS_RESET_CONTROL_BOOST);
 248:	00800074 	movhi	r2,1
 24c:	10841004 	addi	r2,r2,4160
 250:	00c003c4 	movi	r3,15
 254:	10c00035 	stwio	r3,0(r2)
 258:	f800283a 	ret

0000025c <sseg_set_brightness>:
}

void sseg_set_brightness(SsegArray ssegArray, byte_t brightness)
{
	REGW(SsegBrightnessMap[ssegArray], brightness);
 25c:	2109883a 	add	r4,r4,r4
 260:	00800034 	movhi	r2,0
 264:	1081f904 	addi	r2,r2,2020
 268:	2109883a 	add	r4,r4,r4
 26c:	1109883a 	add	r4,r2,r4
 270:	20800017 	ldw	r2,0(r4)
 274:	29403fcc 	andi	r5,r5,255
 278:	11400035 	stwio	r5,0(r2)
 27c:	f800283a 	ret

00000280 <sseg_shutdown>:
	}
}

void sseg_shutdown(void)
{
	REGW(SSEG_RESET_CONTROL_BASE, SSEG_RESET_CONTROL_TC | SSEG_RESET_CONTROL_COOLANT | SSEG_RESET_CONTROL_OIL | SSEG_RESET_CONTROL_AFR | SSEG_RESET_CONTROL_BOOST);
 280:	00800074 	movhi	r2,1
 284:	10841804 	addi	r2,r2,4192
 288:	00c007c4 	movi	r3,31
 28c:	10c00035 	stwio	r3,0(r2)
 290:	f800283a 	ret

00000294 <sseg_set_bcd>:
}

void sseg_set_bcd(SsegArray ssegArray, dword_t addr, byte_t val)
{
	REGW(SSEG_SEL_ADDR_BASE, addr);
 294:	00800074 	movhi	r2,1
 298:	10848004 	addi	r2,r2,4608
 29c:	11400035 	stwio	r5,0(r2)
	REGW(SSEG_WR_VAL_BASE, val);
 2a0:	31803fcc 	andi	r6,r6,255
 2a4:	10bff804 	addi	r2,r2,-32
 2a8:	11800035 	stwio	r6,0(r2)
	REGW(SSEG_WR_CONTROL_BASE, SsegWrMap[ssegArray]);
 2ac:	2109883a 	add	r4,r4,r4
 2b0:	00800034 	movhi	r2,0
 2b4:	1081fd04 	addi	r2,r2,2036
 2b8:	2109883a 	add	r4,r4,r4
 2bc:	1109883a 	add	r4,r2,r4
 2c0:	20c00017 	ldw	r3,0(r4)
 2c4:	00800074 	movhi	r2,1
 2c8:	10847c04 	addi	r2,r2,4592
 2cc:	10c00035 	stwio	r3,0(r2)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 2d0:	0001883a 	nop
{
	REGW(SSEG_SEL_ADDR_BASE, addr);
	REGW(SSEG_WR_VAL_BASE, val);
	REGW(SSEG_WR_CONTROL_BASE, SsegWrMap[ssegArray]);
	nop();
	REGW(SSEG_WR_CONTROL_BASE, 0);
 2d4:	10000035 	stwio	zero,0(r2)
 2d8:	f800283a 	ret

000002dc <sseg_init>:
{
	REGW(SsegBrightnessMap[ssegArray], brightness);
}

void sseg_init(void)
{
 2dc:	defffd04 	addi	sp,sp,-12
 2e0:	dfc00215 	stw	ra,8(sp)
 2e4:	dc400115 	stw	r17,4(sp)
 2e8:	dc000015 	stw	r16,0(sp)
	int i;

	REGW(SSEG_RESET_CONTROL_BASE, SSEG_RESET_CONTROL_TC | SSEG_RESET_CONTROL_COOLANT | SSEG_RESET_CONTROL_OIL | SSEG_RESET_CONTROL_AFR | SSEG_RESET_CONTROL_BOOST);
 2ec:	00800074 	movhi	r2,1
 2f0:	10841804 	addi	r2,r2,4192
 2f4:	00c007c4 	movi	r3,31
 2f8:	10c00035 	stwio	r3,0(r2)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 2fc:	0001883a 	nop
{
	int i;

	REGW(SSEG_RESET_CONTROL_BASE, SSEG_RESET_CONTROL_TC | SSEG_RESET_CONTROL_COOLANT | SSEG_RESET_CONTROL_OIL | SSEG_RESET_CONTROL_AFR | SSEG_RESET_CONTROL_BOOST);
	nop();
	REGW(SSEG_RESET_CONTROL_BASE, 0);
 300:	10000035 	stwio	zero,0(r2)

	for (i = 0; i < SSEG_MAX; ++i)
 304:	0021883a 	mov	r16,zero
 308:	04400104 	movi	r17,4
	{
		sseg_set_bcd(SsegArrayAfr, i, 0);
 30c:	800b883a 	mov	r5,r16
 310:	0009883a 	mov	r4,zero
 314:	000d883a 	mov	r6,zero
 318:	00002940 	call	294 <sseg_set_bcd>
		sseg_set_bcd(SsegArrayBoost, i, 0);
 31c:	800b883a 	mov	r5,r16
 320:	01000044 	movi	r4,1
 324:	000d883a 	mov	r6,zero
 328:	00002940 	call	294 <sseg_set_bcd>
		sseg_set_bcd(SsegArrayOil, i, 0);
 32c:	800b883a 	mov	r5,r16
 330:	01000084 	movi	r4,2
 334:	000d883a 	mov	r6,zero
 338:	00002940 	call	294 <sseg_set_bcd>
		sseg_set_bcd(SsegArrayCoolant, i, 0);
 33c:	800b883a 	mov	r5,r16
 340:	010000c4 	movi	r4,3
 344:	000d883a 	mov	r6,zero

	REGW(SSEG_RESET_CONTROL_BASE, SSEG_RESET_CONTROL_TC | SSEG_RESET_CONTROL_COOLANT | SSEG_RESET_CONTROL_OIL | SSEG_RESET_CONTROL_AFR | SSEG_RESET_CONTROL_BOOST);
	nop();
	REGW(SSEG_RESET_CONTROL_BASE, 0);

	for (i = 0; i < SSEG_MAX; ++i)
 348:	84000044 	addi	r16,r16,1
	{
		sseg_set_bcd(SsegArrayAfr, i, 0);
		sseg_set_bcd(SsegArrayBoost, i, 0);
		sseg_set_bcd(SsegArrayOil, i, 0);
		sseg_set_bcd(SsegArrayCoolant, i, 0);
 34c:	00002940 	call	294 <sseg_set_bcd>

	REGW(SSEG_RESET_CONTROL_BASE, SSEG_RESET_CONTROL_TC | SSEG_RESET_CONTROL_COOLANT | SSEG_RESET_CONTROL_OIL | SSEG_RESET_CONTROL_AFR | SSEG_RESET_CONTROL_BOOST);
	nop();
	REGW(SSEG_RESET_CONTROL_BASE, 0);

	for (i = 0; i < SSEG_MAX; ++i)
 350:	847fee1e 	bne	r16,r17,30c <sseg_init+0x30>
		sseg_set_bcd(SsegArrayAfr, i, 0);
		sseg_set_bcd(SsegArrayBoost, i, 0);
		sseg_set_bcd(SsegArrayOil, i, 0);
		sseg_set_bcd(SsegArrayCoolant, i, 0);
	}
}
 354:	dfc00217 	ldw	ra,8(sp)
 358:	dc400117 	ldw	r17,4(sp)
 35c:	dc000017 	ldw	r16,0(sp)
 360:	dec00304 	addi	sp,sp,12
 364:	f800283a 	ret

00000368 <status_led_en>:
	REGW(SSEG_WR_CONTROL_BASE, 0);
}

void status_led_en(dword_t mask)
{
	REGW(STATUS_LED_EN_BASE, mask);
 368:	00800074 	movhi	r2,1
 36c:	10842004 	addi	r2,r2,4224
 370:	11000035 	stwio	r4,0(r2)
 374:	f800283a 	ret

00000378 <tc_set_max>:
}

void tc_set_max(TcArray tc, dword_t m)
{
	REGW(TC_RESET_BASE, TcResetMap[tc]);
 378:	2109883a 	add	r4,r4,r4
 37c:	2109883a 	add	r4,r4,r4
 380:	00c00034 	movhi	r3,0
 384:	18c20104 	addi	r3,r3,2052
 388:	1907883a 	add	r3,r3,r4
 38c:	18c00017 	ldw	r3,0(r3)
 390:	00800074 	movhi	r2,1
 394:	10844804 	addi	r2,r2,4384
 398:	10c00035 	stwio	r3,0(r2)
	REGW(TcMMap[tc], m);
 39c:	00c00034 	movhi	r3,0
 3a0:	18c20504 	addi	r3,r3,2068
 3a4:	1909883a 	add	r4,r3,r4
 3a8:	20c00017 	ldw	r3,0(r4)
 3ac:	19400035 	stwio	r5,0(r3)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 3b0:	0001883a 	nop
void tc_set_max(TcArray tc, dword_t m)
{
	REGW(TC_RESET_BASE, TcResetMap[tc]);
	REGW(TcMMap[tc], m);
	nop();
	REGW(TC_RESET_BASE, 0);
 3b4:	10000035 	stwio	zero,0(r2)
 3b8:	f800283a 	ret

000003bc <tc_get_ticks>:
}

dword_t tc_get_ticks(TcArray tc)
{
	return REGR(TcStatusMap[tc]) & 0xffffff;
 3bc:	2109883a 	add	r4,r4,r4
 3c0:	00800034 	movhi	r2,0
 3c4:	10820904 	addi	r2,r2,2084
 3c8:	2109883a 	add	r4,r4,r4
 3cc:	1109883a 	add	r4,r2,r4
 3d0:	20800017 	ldw	r2,0(r4)
 3d4:	10c00037 	ldwio	r3,0(r2)
}
 3d8:	00804034 	movhi	r2,256
 3dc:	10bfffc4 	addi	r2,r2,-1
 3e0:	1884703a 	and	r2,r3,r2
 3e4:	f800283a 	ret

000003e8 <tc_get_of>:

bool tc_get_of(TcArray tc)
{

	return (REGR(TcStatusMap[tc]) & TC_STATUS_OF) != 0;
 3e8:	2109883a 	add	r4,r4,r4
 3ec:	00800034 	movhi	r2,0
 3f0:	10820904 	addi	r2,r2,2084
 3f4:	2109883a 	add	r4,r4,r4
 3f8:	1109883a 	add	r4,r2,r4
 3fc:	20800017 	ldw	r2,0(r4)
 400:	10800037 	ldwio	r2,0(r2)
 404:	1004d67a 	srli	r2,r2,25
}
 408:	1080004c 	andi	r2,r2,1
 40c:	f800283a 	ret

00000410 <tc_reset>:

void tc_reset(TcArray tc)
{
	REGW(TC_RESET_BASE, TcResetMap[tc]);
 410:	2109883a 	add	r4,r4,r4
 414:	00800034 	movhi	r2,0
 418:	10820104 	addi	r2,r2,2052
 41c:	2109883a 	add	r4,r4,r4
 420:	1109883a 	add	r4,r2,r4
 424:	20c00017 	ldw	r3,0(r4)
 428:	00800074 	movhi	r2,1
 42c:	10844804 	addi	r2,r2,4384
 430:	10c00035 	stwio	r3,0(r2)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 434:	0001883a 	nop

void tc_reset(TcArray tc)
{
	REGW(TC_RESET_BASE, TcResetMap[tc]);
	nop();
	REGW(TC_RESET_BASE, 0);
 438:	10000035 	stwio	zero,0(r2)
 43c:	f800283a 	ret

00000440 <tc_init>:
}

void tc_init(void)
{
	REGW(TC_RESET_BASE, TC_RESET_TC1 | TC_RESET_TC2 | TC_RESET_TC3 | TC_RESET_TC4);
 440:	00800074 	movhi	r2,1
 444:	10844804 	addi	r2,r2,4384
 448:	00c003c4 	movi	r3,15
 44c:	10c00035 	stwio	r3,0(r2)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 450:	0001883a 	nop

void tc_init(void)
{
	REGW(TC_RESET_BASE, TC_RESET_TC1 | TC_RESET_TC2 | TC_RESET_TC3 | TC_RESET_TC4);
	nop();
	REGW(TC_RESET_BASE, 0);
 454:	10000035 	stwio	zero,0(r2)
 458:	f800283a 	ret

0000045c <tc_shutdown>:
}

void tc_shutdown(void)
{
	REGW(TC_RESET_BASE, TC_RESET_TC1 | TC_RESET_TC2 | TC_RESET_TC3 | TC_RESET_TC4);
 45c:	00800074 	movhi	r2,1
 460:	10844804 	addi	r2,r2,4384
 464:	00c003c4 	movi	r3,15
 468:	10c00035 	stwio	r3,0(r2)
 46c:	f800283a 	ret

00000470 <uart1_init>:
}

void uart1_init(byte_t dbit, byte_t pbit, byte_t sb_tick, byte_t os_tick, word_t dvsr)
{
 470:	d8c0000b 	ldhu	r3,0(sp)
	dword_t baud = ((dbit & 0x7) << 18) | ((pbit & 0x3) << 16) | (sb_tick << 8) | (os_tick << 0);
	REGW(UART1_RESET_CONTROL_BASE, UART1_RESET);
 474:	00800074 	movhi	r2,1
 478:	10844004 	addi	r2,r2,4352
 47c:	02000104 	movi	r8,4
 480:	12000035 	stwio	r8,0(r2)
	REGW(TC_RESET_BASE, TC_RESET_TC1 | TC_RESET_TC2 | TC_RESET_TC3 | TC_RESET_TC4);
}

void uart1_init(byte_t dbit, byte_t pbit, byte_t sb_tick, byte_t os_tick, word_t dvsr)
{
	dword_t baud = ((dbit & 0x7) << 18) | ((pbit & 0x3) << 16) | (sb_tick << 8) | (os_tick << 0);
 484:	294000cc 	andi	r5,r5,3
 488:	31803fcc 	andi	r6,r6,255
 48c:	300c923a 	slli	r6,r6,8
 490:	280a943a 	slli	r5,r5,16
 494:	210001cc 	andi	r4,r4,7
 498:	200894ba 	slli	r4,r4,18
 49c:	298ab03a 	or	r5,r5,r6
 4a0:	39c03fcc 	andi	r7,r7,255
 4a4:	2908b03a 	or	r4,r5,r4
 4a8:	21ceb03a 	or	r7,r4,r7
	REGW(UART1_RESET_CONTROL_BASE, UART1_RESET);
	REGW(UART1_BAUD_CONTROL_BASE, baud);
 4ac:	01400074 	movhi	r5,1
 4b0:	2944b804 	addi	r5,r5,4832
 4b4:	29c00035 	stwio	r7,0(r5)
	REGW(UART1_DVSR_BASE, dvsr);
 4b8:	1809883a 	mov	r4,r3
 4bc:	00c00074 	movhi	r3,1
 4c0:	18c45004 	addi	r3,r3,4416
 4c4:	19000035 	stwio	r4,0(r3)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 4c8:	0001883a 	nop
	dword_t baud = ((dbit & 0x7) << 18) | ((pbit & 0x3) << 16) | (sb_tick << 8) | (os_tick << 0);
	REGW(UART1_RESET_CONTROL_BASE, UART1_RESET);
	REGW(UART1_BAUD_CONTROL_BASE, baud);
	REGW(UART1_DVSR_BASE, dvsr);
	nop();
	REGW(UART1_RESET_CONTROL_BASE, 0);
 4cc:	10000035 	stwio	zero,0(r2)
 4d0:	f800283a 	ret

000004d4 <uart1_shutdown>:
}

void uart1_shutdown(void)
{
	REGW(UART1_RESET_CONTROL_BASE, UART1_RESET_TX_TC | UART1_RESET_RX_TC | UART1_RESET);
 4d4:	00800074 	movhi	r2,1
 4d8:	10844004 	addi	r2,r2,4352
 4dc:	00c001c4 	movi	r3,7
 4e0:	10c00035 	stwio	r3,0(r2)
 4e4:	f800283a 	ret

000004e8 <uart1_rx>:
}

int uart1_rx(void)
{
	if ((REGR(UART1_STATUS_CONTROL_BASE) & UART1_STATUS_RX_EMPTY) == 0)
 4e8:	00800074 	movhi	r2,1
 4ec:	1084ac04 	addi	r2,r2,4784
 4f0:	10800037 	ldwio	r2,0(r2)
 4f4:	1080100c 	andi	r2,r2,64
 4f8:	1000091e 	bne	r2,zero,520 <uart1_rx+0x38>
	{
		REGW(UART1_WR_CONTROL_BASE, UART1_WR_CONTROL_RD);
 4fc:	00800074 	movhi	r2,1
 500:	10843804 	addi	r2,r2,4320
 504:	00c00084 	movi	r3,2
 508:	10c00035 	stwio	r3,0(r2)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 50c:	0001883a 	nop
{
	if ((REGR(UART1_STATUS_CONTROL_BASE) & UART1_STATUS_RX_EMPTY) == 0)
	{
		REGW(UART1_WR_CONTROL_BASE, UART1_WR_CONTROL_RD);
		nop();
		REGW(UART1_WR_CONTROL_BASE, 0);
 510:	10000035 	stwio	zero,0(r2)
		return REGR(UART1_R_DATA_BASE);
 514:	10807c04 	addi	r2,r2,496
 518:	10800037 	ldwio	r2,0(r2)
 51c:	f800283a 	ret
	}

	return -1;
 520:	00bfffc4 	movi	r2,-1
}
 524:	f800283a 	ret

00000528 <uart1_tx>:

void uart1_tx(char data)
{
	while ((REGR(UART1_STATUS_CONTROL_BASE) & UART1_STATUS_TX_FULL) != 0);
 528:	00c00074 	movhi	r3,1
 52c:	18c4ac04 	addi	r3,r3,4784
 530:	18800037 	ldwio	r2,0(r3)
 534:	1080200c 	andi	r2,r2,128
 538:	103ffd1e 	bne	r2,zero,530 <uart1_tx+0x8>
	REGW(UART1_W_DATA_BASE, data);
 53c:	21003fcc 	andi	r4,r4,255
 540:	2100201c 	xori	r4,r4,128
 544:	213fe004 	addi	r4,r4,-128
 548:	00800074 	movhi	r2,1
 54c:	1084bc04 	addi	r2,r2,4848
 550:	11000035 	stwio	r4,0(r2)
	REGW(UART1_WR_CONTROL_BASE, UART1_WR_CONTROL_WR);
 554:	10bf7c04 	addi	r2,r2,-528
 558:	00c00044 	movi	r3,1
 55c:	10c00035 	stwio	r3,0(r2)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 560:	0001883a 	nop
{
	while ((REGR(UART1_STATUS_CONTROL_BASE) & UART1_STATUS_TX_FULL) != 0);
	REGW(UART1_W_DATA_BASE, data);
	REGW(UART1_WR_CONTROL_BASE, UART1_WR_CONTROL_WR);
	nop();
	REGW(UART1_WR_CONTROL_BASE, 0);
 564:	10000035 	stwio	zero,0(r2)
 568:	f800283a 	ret

0000056c <uart1_read_status>:
}

dword_t uart1_read_status(void)
{
	return REGR(UART1_STATUS_CONTROL_BASE);
}
 56c:	00800074 	movhi	r2,1
 570:	1084ac04 	addi	r2,r2,4784
 574:	10800037 	ldwio	r2,0(r2)
 578:	f800283a 	ret

0000057c <warn_set_brightness>:

void warn_set_brightness(byte_t brightness)
{
	REGW(WARN_PWM_BRIGHTNESS_BASE, brightness);
 57c:	21003fcc 	andi	r4,r4,255
 580:	00800074 	movhi	r2,1
 584:	10849404 	addi	r2,r2,4688
 588:	11000035 	stwio	r4,0(r2)
 58c:	f800283a 	ret

00000590 <warn_set_en>:
}

void warn_set_en(bool en)
{
	REGW(WARN_PWM_CONTROL_BASE, (en ? WARN_PWM_CONTROL_EN : 0));
 590:	21003fcc 	andi	r4,r4,255
 594:	00800074 	movhi	r2,1
 598:	10842804 	addi	r2,r2,4256
 59c:	11000035 	stwio	r4,0(r2)
 5a0:	f800283a 	ret

000005a4 <warn_init>:
}

void warn_init(void)
{
	REGW(WARN_PWM_CONTROL_BASE, WARN_PWM_CONTROL_RESET);
 5a4:	00800074 	movhi	r2,1
 5a8:	10842804 	addi	r2,r2,4256
 5ac:	00c00084 	movi	r3,2
 5b0:	10c00035 	stwio	r3,0(r2)
	TC4_STATUS_BASE
};

void nop(void)
{
	__asm__ ("nop");
 5b4:	0001883a 	nop

void warn_init(void)
{
	REGW(WARN_PWM_CONTROL_BASE, WARN_PWM_CONTROL_RESET);
	nop();
	REGW(WARN_PWM_CONTROL_BASE, 0);
 5b8:	10000035 	stwio	zero,0(r2)
 5bc:	f800283a 	ret

000005c0 <warn_shutdown>:
}

void warn_shutdown(void)
{
	REGW(WARN_PWM_CONTROL_BASE, WARN_PWM_CONTROL_RESET);
 5c0:	00800074 	movhi	r2,1
 5c4:	10842804 	addi	r2,r2,4256
 5c8:	00c00084 	movi	r3,2
 5cc:	10c00035 	stwio	r3,0(r2)
 5d0:	f800283a 	ret

000005d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 5d4:	deffff04 	addi	sp,sp,-4
 5d8:	dfc00015 	stw	ra,0(sp)
 5dc:	00c00034 	movhi	r3,0
 5e0:	18c20d04 	addi	r3,r3,2100
 5e4:	01000034 	movhi	r4,0
 5e8:	21021404 	addi	r4,r4,2128

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 5ec:	1900061e 	bne	r3,r4,608 <alt_load+0x34>
 5f0:	00c00034 	movhi	r3,0
 5f4:	18c00804 	addi	r3,r3,32
 5f8:	01000034 	movhi	r4,0
 5fc:	21000804 	addi	r4,r4,32
 600:	1900151e 	bne	r3,r4,658 <alt_load+0x84>
 604:	00000e06 	br	640 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
 608:	01400034 	movhi	r5,0
 60c:	29421404 	addi	r5,r5,2128
 610:	00bfff04 	movi	r2,-4
 614:	28cbc83a 	sub	r5,r5,r3
 618:	288a703a 	and	r5,r5,r2
 61c:	0005883a 	mov	r2,zero
 620:	00000506 	br	638 <alt_load+0x64>
 624:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
 628:	39c00017 	ldw	r7,0(r7)
 62c:	188d883a 	add	r6,r3,r2
 630:	10800104 	addi	r2,r2,4
 634:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 638:	117ffa1e 	bne	r2,r5,624 <alt_load+0x50>
 63c:	003fec06 	br	5f0 <alt_load+0x1c>
 640:	00c00034 	movhi	r3,0
 644:	18c1f304 	addi	r3,r3,1996
 648:	01000034 	movhi	r4,0
 64c:	2101f304 	addi	r4,r4,1996

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 650:	1900131e 	bne	r3,r4,6a0 <alt_load+0xcc>
 654:	00000e06 	br	690 <alt_load+0xbc>
 658:	01400034 	movhi	r5,0
 65c:	29400804 	addi	r5,r5,32
 660:	00bfff04 	movi	r2,-4
 664:	28cbc83a 	sub	r5,r5,r3
 668:	288a703a 	and	r5,r5,r2
 66c:	0005883a 	mov	r2,zero
 670:	00000506 	br	688 <alt_load+0xb4>
 674:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
 678:	39c00017 	ldw	r7,0(r7)
 67c:	188d883a 	add	r6,r3,r2
 680:	10800104 	addi	r2,r2,4
 684:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 688:	117ffa1e 	bne	r2,r5,674 <alt_load+0xa0>
 68c:	003fec06 	br	640 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 690:	00007940 	call	794 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 694:	dfc00017 	ldw	ra,0(sp)
 698:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 69c:	00007981 	jmpi	798 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
 6a0:	01400034 	movhi	r5,0
 6a4:	29420d04 	addi	r5,r5,2100
 6a8:	00bfff04 	movi	r2,-4
 6ac:	28cbc83a 	sub	r5,r5,r3
 6b0:	288a703a 	and	r5,r5,r2
 6b4:	0005883a 	mov	r2,zero
 6b8:	00000506 	br	6d0 <alt_load+0xfc>
 6bc:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
 6c0:	39c00017 	ldw	r7,0(r7)
 6c4:	188d883a 	add	r6,r3,r2
 6c8:	10800104 	addi	r2,r2,4
 6cc:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 6d0:	117ffa1e 	bne	r2,r5,6bc <alt_load+0xe8>
 6d4:	003fee06 	br	690 <alt_load+0xbc>

000006d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 6d8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 6dc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 6e0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 6e4:	000073c0 	call	73c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 6e8:	000075c0 	call	75c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 6ec:	d1201017 	ldw	r4,-32704(gp)
 6f0:	d1600f17 	ldw	r5,-32708(gp)
 6f4:	d1a00e17 	ldw	r6,-32712(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 6f8:	dfc00017 	ldw	ra,0(sp)
 6fc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 700:	000005c1 	jmpi	5c <main>

00000704 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 704:	defffe04 	addi	sp,sp,-8
 708:	dc000015 	stw	r16,0(sp)
 70c:	dfc00115 	stw	ra,4(sp)
 710:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 714:	00007a40 	call	7a4 <strlen>
 718:	01000034 	movhi	r4,0
 71c:	21021304 	addi	r4,r4,2124
 720:	800b883a 	mov	r5,r16
 724:	100d883a 	mov	r6,r2
 728:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
 72c:	dfc00117 	ldw	ra,4(sp)
 730:	dc000017 	ldw	r16,0(sp)
 734:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 738:	00007601 	jmpi	760 <altera_avalon_jtag_uart_write>

0000073c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 73c:	deffff04 	addi	sp,sp,-4
 740:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2E, nios2e);
 744:	000079c0 	call	79c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 748:	00800044 	movi	r2,1
 74c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 750:	dfc00017 	ldw	ra,0(sp)
 754:	dec00104 	addi	sp,sp,4
 758:	f800283a 	ret

0000075c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 75c:	f800283a 	ret

00000760 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 760:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 764:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 768:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 76c:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 770:	00000606 	br	78c <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 774:	31c00037 	ldwio	r7,0(r6)
 778:	39ffffec 	andhi	r7,r7,65535
 77c:	383ffd26 	beq	r7,zero,774 <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 780:	29c00007 	ldb	r7,0(r5)
 784:	29400044 	addi	r5,r5,1
 788:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 78c:	293ff936 	bltu	r5,r4,774 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
 790:	f800283a 	ret

00000794 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 794:	f800283a 	ret

00000798 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 798:	f800283a 	ret

0000079c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 79c:	000170fa 	wrctl	ienable,zero
 7a0:	f800283a 	ret

000007a4 <strlen>:
 7a4:	20800007 	ldb	r2,0(r4)
 7a8:	10000626 	beq	r2,zero,7c4 <strlen+0x20>
 7ac:	2005883a 	mov	r2,r4
 7b0:	10800044 	addi	r2,r2,1
 7b4:	10c00007 	ldb	r3,0(r2)
 7b8:	183ffd1e 	bne	r3,zero,7b0 <strlen+0xc>
 7bc:	1105c83a 	sub	r2,r2,r4
 7c0:	f800283a 	ret
 7c4:	0005883a 	mov	r2,zero
 7c8:	f800283a 	ret
