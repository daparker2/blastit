
controller.elf:     file format elf32-littlenios2
controller.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000001b0 memsz 0x000001b0 flags r-x
    LOAD off    0x000011d0 vaddr 0x000001d0 paddr 0x000001d4 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000011d8 vaddr 0x000001d8 paddr 0x000001d8 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000001b0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rwdata       00000004  000001d0  000001d4  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  3 .bss          0000000c  000001d8  000001d8  000011d8  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000023  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000011f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000788  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000435  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000457  00000000  00000000  00001ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000081  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000010  00000000  00000000  00002834  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  00002848  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .thread_model 00000003  00000000  00000000  0000353d  2**0
                  CONTENTS, READONLY
 15 .cpu          00000006  00000000  00000000  00003540  2**0
                  CONTENTS, READONLY
 16 .qsys         00000001  00000000  00000000  00003546  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  00003547  2**0
                  CONTENTS, READONLY
 18 .sysid_hash   00000004  00000000  00000000  00003548  2**0
                  CONTENTS, READONLY
 19 .sysid_base   00000004  00000000  00000000  0000354c  2**0
                  CONTENTS, READONLY
 20 .sysid_time   00000004  00000000  00000000  00003550  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00003554  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000355f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000356a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00003575  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000016  00000000  00000000  0000357f  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00030b02  00000000  00000000  00003595  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
000001d0 l    d  .rwdata	00000000 .rwdata
000001d8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../controller_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 
00000170 g     F .text	0000002c alt_main
000001d4 g       *ABS*	00000000 __flash_rwdata_start
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000001dc g     O .bss	00000004 alt_argv
000081d0 g       *ABS*	00000000 _gp
000001e4 g       *ABS*	00000000 __bss_end
000001c0 g     F .text	00000004 alt_dcache_flush_all
000001d4 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
000001d0 g       *ABS*	00000000 __ram_rodata_end
000001d0 g     O .rwdata	00000004 jtag_uart_0
000001e4 g       *ABS*	00000000 end
00003c00 g       *ABS*	00000000 __alt_stack_pointer
00000020 g     F .text	0000003c _start
000001bc g     F .text	00000004 alt_sys_init
000001d0 g       *ABS*	00000000 __ram_rwdata_start
000001d0 g       *ABS*	00000000 __ram_rodata_start
000001e4 g       *ABS*	00000000 __alt_stack_base
000001d8 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000010 main
000001d8 g     O .bss	00000004 alt_envp
000001d0 g       *ABS*	00000000 __flash_rodata_start
0000019c g     F .text	00000020 alt_irq_init
000001e0 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000001d4 g       *ABS*	00000000 _edata
000001e4 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000001c8 g     F .text	00000008 altera_nios2_qsys_irq_init
00003c00 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000001c4 g     F .text	00000004 alt_icache_flush_all
0000006c g     F .text	00000104 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	decf0014 	ori	sp,sp,15360
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a07414 	ori	gp,gp,33232
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10807614 	ori	r2,r2,472

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c07914 	ori	r3,r3,484

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	000006c0 	call	6c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00001700 	call	170 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:
	/* Event loop never exits. */
	while (1)
	{
		//alt_putstr("Hello from Nios II!\n");
		en = ~en;
		IOWR_ALTERA_AVALON_PIO_SET_BITS(WARNING_EN_BASE, en & 0x1);
  5c:	00a40414 	movui	r2,36880
  60:	00c00044 	movi	r3,1
  64:	10c00035 	stwio	r3,0(r2)
  68:	003fff06 	br	68 <main+0xc>

0000006c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  6c:	deffff04 	addi	sp,sp,-4
  70:	dfc00015 	stw	ra,0(sp)
  74:	00c00034 	movhi	r3,0
  78:	18c07404 	addi	r3,r3,464
  7c:	01000034 	movhi	r4,0
  80:	21007504 	addi	r4,r4,468

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  84:	1900061e 	bne	r3,r4,a0 <alt_load+0x34>
  88:	00c00034 	movhi	r3,0
  8c:	18c00804 	addi	r3,r3,32
  90:	01000034 	movhi	r4,0
  94:	21000804 	addi	r4,r4,32
  98:	1900151e 	bne	r3,r4,f0 <alt_load+0x84>
  9c:	00000e06 	br	d8 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
  a0:	01400034 	movhi	r5,0
  a4:	29407504 	addi	r5,r5,468
  a8:	00bfff04 	movi	r2,-4
  ac:	28cbc83a 	sub	r5,r5,r3
  b0:	288a703a 	and	r5,r5,r2
  b4:	0005883a 	mov	r2,zero
  b8:	00000506 	br	d0 <alt_load+0x64>
  bc:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
  c0:	39c00017 	ldw	r7,0(r7)
  c4:	188d883a 	add	r6,r3,r2
  c8:	10800104 	addi	r2,r2,4
  cc:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  d0:	117ffa1e 	bne	r2,r5,bc <alt_load+0x50>
  d4:	003fec06 	br	88 <alt_load+0x1c>
  d8:	00c00034 	movhi	r3,0
  dc:	18c07404 	addi	r3,r3,464
  e0:	01000034 	movhi	r4,0
  e4:	21007404 	addi	r4,r4,464

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  e8:	1900131e 	bne	r3,r4,138 <alt_load+0xcc>
  ec:	00000e06 	br	128 <alt_load+0xbc>
  f0:	01400034 	movhi	r5,0
  f4:	29400804 	addi	r5,r5,32
  f8:	00bfff04 	movi	r2,-4
  fc:	28cbc83a 	sub	r5,r5,r3
 100:	288a703a 	and	r5,r5,r2
 104:	0005883a 	mov	r2,zero
 108:	00000506 	br	120 <alt_load+0xb4>
 10c:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
 110:	39c00017 	ldw	r7,0(r7)
 114:	188d883a 	add	r6,r3,r2
 118:	10800104 	addi	r2,r2,4
 11c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 120:	117ffa1e 	bne	r2,r5,10c <alt_load+0xa0>
 124:	003fec06 	br	d8 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 128:	00001c00 	call	1c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 12c:	dfc00017 	ldw	ra,0(sp)
 130:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 134:	00001c41 	jmpi	1c4 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
 138:	01400034 	movhi	r5,0
 13c:	29407404 	addi	r5,r5,464
 140:	00bfff04 	movi	r2,-4
 144:	28cbc83a 	sub	r5,r5,r3
 148:	288a703a 	and	r5,r5,r2
 14c:	0005883a 	mov	r2,zero
 150:	00000506 	br	168 <alt_load+0xfc>
 154:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
 158:	39c00017 	ldw	r7,0(r7)
 15c:	188d883a 	add	r6,r3,r2
 160:	10800104 	addi	r2,r2,4
 164:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 168:	117ffa1e 	bne	r2,r5,154 <alt_load+0xe8>
 16c:	003fee06 	br	128 <alt_load+0xbc>

00000170 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 170:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 174:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 178:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 17c:	000019c0 	call	19c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 180:	00001bc0 	call	1bc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 184:	d1200417 	ldw	r4,-32752(gp)
 188:	d1600317 	ldw	r5,-32756(gp)
 18c:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 190:	dfc00017 	ldw	ra,0(sp)
 194:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 198:	000005c1 	jmpi	5c <main>

0000019c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 19c:	deffff04 	addi	sp,sp,-4
 1a0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2E, nios2e);
 1a4:	00001c80 	call	1c8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1a8:	00800044 	movi	r2,1
 1ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1b0:	dfc00017 	ldw	ra,0(sp)
 1b4:	dec00104 	addi	sp,sp,4
 1b8:	f800283a 	ret

000001bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1bc:	f800283a 	ret

000001c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1c0:	f800283a 	ret

000001c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1c4:	f800283a 	ret

000001c8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 1c8:	000170fa 	wrctl	ienable,zero
 1cc:	f800283a 	ret
