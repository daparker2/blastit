
controller.elf:     file format elf32-littlenios2
controller.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000002b0 memsz 0x000002b0 flags r-x
    LOAD off    0x00002000 vaddr 0x00001000 paddr 0x000002d0 align 2**12
         filesz 0x0000001c memsz 0x00000028 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000002b0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  00001000  000002d0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  00001018  000002e8  00002018  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  0000101c  000002ec  0000201c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  00002040  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c7c  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000078d  00000000  00000000  00002e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000008b2  00000000  00000000  000035d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000198  00000000  00000000  00003e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000514  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000210  00000000  00000000  00004530  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000030  00000000  00000000  00004740  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  00004770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  000055c5  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  000055c8  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  000055d4  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  000055d5  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  000055d6  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  000055da  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  000055de  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000055e2  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000055ed  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000055f8  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  00005603  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000016  00000000  00000000  0000560d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000a6752  00000000  00000000  00005623  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
00001000 l    d  .rodata	00000000 .rodata
00001018 l    d  .rwdata	00000000 .rwdata
0000101c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../controller_bsp//obj/HAL/src/crt0.o
00000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
00000188 g     F .text	0000002c alt_main
000002e8 g       *ABS*	00000000 __flash_rwdata_start
000001b4 g     F .text	00000038 alt_putstr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00001020 g     O .bss	00000004 alt_argv
00009018 g       *ABS*	00000000 _gp
00000270 g     F .text	00000038 alt_icache_flush
00001028 g       *ABS*	00000000 __bss_end
00000244 g     F .text	00000018 alt_dcache_flush_all
0000101c g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_iram
00001018 g       *ABS*	00000000 __ram_rodata_end
00001018 g     O .rwdata	00000004 jtag_uart_0
00001028 g       *ABS*	00000000 end
00001800 g       *ABS*	00000000 __alt_stack_pointer
00000210 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000004c _start
0000020c g     F .text	00000004 alt_sys_init
00001018 g       *ABS*	00000000 __ram_rwdata_start
00001000 g       *ABS*	00000000 __ram_rodata_start
00001000 g       *ABS*	00000000 __alt_mem_dram
00001028 g       *ABS*	00000000 __alt_stack_base
0000101c g       *ABS*	00000000 __bss_start
0000006c g     F .text	00000018 main
0000101c g     O .bss	00000004 alt_envp
000002d0 g       *ABS*	00000000 __flash_rodata_start
000001ec g     F .text	00000020 alt_irq_init
00001024 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000101c g       *ABS*	00000000 _edata
00001028 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000268 g     F .text	00000008 altera_nios2_qsys_irq_init
00001800 g       *ABS*	00000000 __alt_data_end
0000001c g       .entry	00000000 _exit
000002a8 g     F .text	00000028 strlen
0000025c g     F .text	0000000c alt_icache_flush_all
00000084 g     F .text	00000104 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08400814 	ori	at,at,32
    jmp r1
  18:	0800683a 	jmp	at

0000001c <_exit>:
  1c:	00000000 	call	0 <__reset>

Disassembly of section .text:

00000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  20:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  24:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  28:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  2c:	00bffd16 	blt	zero,r2,24 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  30:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  34:	dec60014 	ori	sp,sp,6144
    movhi gp, %hi(_gp)
  38:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  3c:	d6a40614 	ori	gp,gp,36888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  40:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  44:	10840714 	ori	r2,r2,4124

    movhi r3, %hi(__bss_end)
  48:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  4c:	18c40a14 	ori	r3,r3,4136

    beq r2, r3, 1f
  50:	10c00326 	beq	r2,r3,60 <_start+0x40>

0:
    stw zero, (r2)
  54:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  58:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  5c:	10fffd36 	bltu	r2,r3,54 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  60:	00000840 	call	84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  64:	00001880 	call	188 <alt_main>

00000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  68:	003fff06 	br	68 <alt_after_alt_main>

0000006c <main>:
 */

#include "sys/alt_stdio.h"

int main()
{ 
  6c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
  70:	01000034 	movhi	r4,0
  74:	21040004 	addi	r4,r4,4096
 */

#include "sys/alt_stdio.h"

int main()
{ 
  78:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
  7c:	00001b40 	call	1b4 <alt_putstr>
  80:	003fff06 	br	80 <main+0x14>

00000084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  84:	deffff04 	addi	sp,sp,-4
  88:	dfc00015 	stw	ra,0(sp)
  8c:	00c00034 	movhi	r3,0
  90:	18c40604 	addi	r3,r3,4120
  94:	01000034 	movhi	r4,0
  98:	2100ba04 	addi	r4,r4,744

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  9c:	1900061e 	bne	r3,r4,b8 <alt_load+0x34>
  a0:	00c00034 	movhi	r3,0
  a4:	18c00804 	addi	r3,r3,32
  a8:	01000034 	movhi	r4,0
  ac:	21000804 	addi	r4,r4,32
  b0:	1900151e 	bne	r3,r4,108 <alt_load+0x84>
  b4:	00000e06 	br	f0 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
  b8:	01400034 	movhi	r5,0
  bc:	29440704 	addi	r5,r5,4124
  c0:	00bfff04 	movi	r2,-4
  c4:	28cbc83a 	sub	r5,r5,r3
  c8:	288a703a 	and	r5,r5,r2
  cc:	0005883a 	mov	r2,zero
  d0:	00000506 	br	e8 <alt_load+0x64>
  d4:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
  d8:	39c00017 	ldw	r7,0(r7)
  dc:	188d883a 	add	r6,r3,r2
  e0:	10800104 	addi	r2,r2,4
  e4:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  e8:	117ffa1e 	bne	r2,r5,d4 <alt_load+0x50>
  ec:	003fec06 	br	a0 <alt_load+0x1c>
  f0:	00c00034 	movhi	r3,0
  f4:	18c40004 	addi	r3,r3,4096
  f8:	01000034 	movhi	r4,0
  fc:	2100b404 	addi	r4,r4,720

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 100:	1900131e 	bne	r3,r4,150 <alt_load+0xcc>
 104:	00000e06 	br	140 <alt_load+0xbc>
 108:	01400034 	movhi	r5,0
 10c:	29400804 	addi	r5,r5,32
 110:	00bfff04 	movi	r2,-4
 114:	28cbc83a 	sub	r5,r5,r3
 118:	288a703a 	and	r5,r5,r2
 11c:	0005883a 	mov	r2,zero
 120:	00000506 	br	138 <alt_load+0xb4>
 124:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
 128:	39c00017 	ldw	r7,0(r7)
 12c:	188d883a 	add	r6,r3,r2
 130:	10800104 	addi	r2,r2,4
 134:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 138:	117ffa1e 	bne	r2,r5,124 <alt_load+0xa0>
 13c:	003fec06 	br	f0 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 140:	00002440 	call	244 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 144:	dfc00017 	ldw	ra,0(sp)
 148:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 14c:	000025c1 	jmpi	25c <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
 150:	01400034 	movhi	r5,0
 154:	29440604 	addi	r5,r5,4120
 158:	00bfff04 	movi	r2,-4
 15c:	28cbc83a 	sub	r5,r5,r3
 160:	288a703a 	and	r5,r5,r2
 164:	0005883a 	mov	r2,zero
 168:	00000506 	br	180 <alt_load+0xfc>
 16c:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
 170:	39c00017 	ldw	r7,0(r7)
 174:	188d883a 	add	r6,r3,r2
 178:	10800104 	addi	r2,r2,4
 17c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 180:	117ffa1e 	bne	r2,r5,16c <alt_load+0xe8>
 184:	003fee06 	br	140 <alt_load+0xbc>

00000188 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 188:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 18c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 190:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 194:	00001ec0 	call	1ec <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 198:	000020c0 	call	20c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 19c:	d1200317 	ldw	r4,-32756(gp)
 1a0:	d1600217 	ldw	r5,-32760(gp)
 1a4:	d1a00117 	ldw	r6,-32764(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 1a8:	dfc00017 	ldw	ra,0(sp)
 1ac:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1b0:	000006c1 	jmpi	6c <main>

000001b4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 1b4:	defffe04 	addi	sp,sp,-8
 1b8:	dc000015 	stw	r16,0(sp)
 1bc:	dfc00115 	stw	ra,4(sp)
 1c0:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1c4:	00002a80 	call	2a8 <strlen>
 1c8:	01000034 	movhi	r4,0
 1cc:	21040604 	addi	r4,r4,4120
 1d0:	800b883a 	mov	r5,r16
 1d4:	100d883a 	mov	r6,r2
 1d8:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
 1dc:	dfc00117 	ldw	ra,4(sp)
 1e0:	dc000017 	ldw	r16,0(sp)
 1e4:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1e8:	00002101 	jmpi	210 <altera_avalon_jtag_uart_write>

000001ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1ec:	deffff04 	addi	sp,sp,-4
 1f0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1f4:	00002680 	call	268 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1f8:	00800044 	movi	r2,1
 1fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200:	dfc00017 	ldw	ra,0(sp)
 204:	dec00104 	addi	sp,sp,4
 208:	f800283a 	ret

0000020c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20c:	f800283a 	ret

00000210 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 210:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 214:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 218:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 21c:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 220:	00000606 	br	23c <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 224:	31c00037 	ldwio	r7,0(r6)
 228:	39ffffec 	andhi	r7,r7,65535
 22c:	383ffd26 	beq	r7,zero,224 <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 230:	29c00007 	ldb	r7,0(r5)
 234:	29400044 	addi	r5,r5,1
 238:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 23c:	293ff936 	bltu	r5,r4,224 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
 240:	f800283a 	ret

00000244 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 244:	0005883a 	mov	r2,zero
 248:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 24c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 250:	10800804 	addi	r2,r2,32
 254:	10fffd1e 	bne	r2,r3,24c <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 258:	f800283a 	ret

0000025c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 25c:	0009883a 	mov	r4,zero
 260:	01440004 	movi	r5,4096
 264:	00002701 	jmpi	270 <alt_icache_flush>

00000268 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 268:	000170fa 	wrctl	ienable,zero
 26c:	f800283a 	ret

00000270 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 270:	00840004 	movi	r2,4096
 274:	1140012e 	bgeu	r2,r5,27c <alt_icache_flush+0xc>
 278:	100b883a 	mov	r5,r2
 27c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 280:	2005883a 	mov	r2,r4
 284:	00000206 	br	290 <alt_icache_flush+0x20>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 288:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 28c:	10800804 	addi	r2,r2,32
 290:	117ffd36 	bltu	r2,r5,288 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 294:	210007cc 	andi	r4,r4,31
 298:	20000126 	beq	r4,zero,2a0 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 29c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 2a0:	0000203a 	flushp
 2a4:	f800283a 	ret

000002a8 <strlen>:
 2a8:	20800007 	ldb	r2,0(r4)
 2ac:	10000626 	beq	r2,zero,2c8 <strlen+0x20>
 2b0:	2005883a 	mov	r2,r4
 2b4:	10800044 	addi	r2,r2,1
 2b8:	10c00007 	ldb	r3,0(r2)
 2bc:	183ffd1e 	bne	r3,zero,2b4 <strlen+0xc>
 2c0:	1105c83a 	sub	r2,r2,r4
 2c4:	f800283a 	ret
 2c8:	0005883a 	mov	r2,zero
 2cc:	f800283a 	ret
